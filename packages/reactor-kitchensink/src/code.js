export default {
	"ActionSheet": [
		{
			"file": "ActionSheet.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, ActionSheet, Button } from '@extjs/reactor/modern';\n\nexport default class ActionSheetExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            showActionSheet: false\n        };\n    }\n\n    hideActionSheet() {\n        this.setState({ showActionSheet: false })\n    }\n\n    showActionSheet() {\n        this.setState({ showActionSheet: true })\n    }\n\n    render() {\n        const { showActionSheet } = this.state;\n\n        return (\n            <Container>\n                <Panel shadow>\n                    <Button handler={this.showActionSheet.bind(this)}>Show Action Sheet</Button>\n                </Panel>\n                <ActionSheet hidden={!showActionSheet}>\n                    <Button ui=\"decline\" handler={this.hideActionSheet.bind(this)}>Delete Draft</Button>\n                    <Button handler={this.hideActionSheet.bind(this)}>Save Draft</Button>\n                    <Button handler={this.hideActionSheet.bind(this)}>Cancel</Button>\n                </ActionSheet>\n            </Container>\n        )\n    }\n\n}"
		}
	],
	"Animations": [
		{
			"file": "Animations.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button } from '@extjs/reactor/modern';\n\nexport default class Animations extends Component {\n\n    constructor() {\n        super();\n        this.state = { activeCard: 0 };\n    }\n\n    switchCards(animation) {\n        this.refs.cards.getLayout().setAnimation(animation);\n        this.setState({ activeCard: this.state.activeCard === 0 ? 1 : 0 });\n    }\n\n    createCardContents() {\n        return [\n            { name: 'Slide Left', animation: { type: 'slide', direction: 'left', duration: 500 } },\n            { name: 'Slide Right', animation: { type: 'slide', direction: 'right', duration: 500 } },\n            { name: 'Slide Up', animation: { type: 'slide', direction: 'up', duration: 500 } },\n            { name: 'Slide Down', animation: { type: 'slide', direction: 'down', duration: 500 } },\n            { name: 'Cover Left', animation: { type: 'cover', direction: 'left', duration: 500 } },\n            { name: 'Cover Right', animation: { type: 'cover', direction: 'right', duration: 500 } },\n            { name: 'Cover Up', animation: { type: 'cover', direction: 'up', duration: 500 } },\n            { name: 'Cover Down', animation: { type: 'cover', direction: 'down', duration: 500 } },\n            { name: 'Reveal Left', animation: { type: 'reveal', direction: 'left', duration: 500 } },\n            { name: 'Reveal Right', animation: { type: 'reveal', direction: 'right', duration: 500 } },\n            { name: 'Reveal Up', animation: { type: 'reveal', direction: 'up', duration: 500 } },\n            { name: 'Reveal Down', animation: { type: 'reveal', direction: 'down', duration: 500 } },\n            { name: 'Fade', animation: { type: 'fade', duration: 500 } },\n            { name: 'Pop', animation: { type: 'pop', duration: 500 } },\n            { name: 'Flip', animation: { type: 'flip', duration: 500 } }\n        ].map(({name, animation}, i) => <Button key={i} onTap={this.switchCards.bind(this, animation)} text={name}/>);\n    }\n\n    render() {\n        return (\n            <Container ref=\"cards\" layout=\"card\" activeItem={this.state.activeCard} shadow={true}>\n                <Panel title=\"Card 1\" layout=\"vbox\">\n                    {this.createCardContents()}\n                </Panel>\n                <Panel title=\"Card 2\" layout=\"vbox\">\n                    {this.createCardContents()}\n                </Panel>\n            </Container>\n        )\n    }\n\n}\n"
		}
	],
	"Audio": [
		{
			"file": "Audio.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Audio, Button, Container } from '@extjs/reactor/modern';\n\nexport default class AudioExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            playing: false\n        };\n    }\n\n    toggleAudioAndroid() {\n        const { audio } = this.refs;\n        const { playing } = this.state;\n\n        if (playing) {\n            audio.pause();\n        } else {\n            audio.play();\n        }        \n\n        this.setState({ playing: !playing });\n    }\n\n    render() {\n        const { playing } = this.state;\n\n        return (\n            <Container layout={{ type: 'vbox', align: 'stretch', pack: 'center' }}>\n                <Container \n                    shadow={true} \n                    layout={Ext.os.is.Android ? { type: 'vbox', align: 'center', pack: 'center' } : 'fit'}\n                >\n                    <Audio\n                        ref=\"audio\"\n                        loop={true} \n                        url=\"resources/audio/crash.mp3\"\n                        posterUrl=\"resources/images/cover.jpg\"\n                        enableControls={!Ext.os.is.Android}\n                    />\n                    { Ext.os.is.Android && (\n                        <Button text={playing ? 'Play Audio' : 'Pause Audio'} margin={20} handler={this.toggleAudioAndroid.bind(this)}/>\n                    )}\n                </Container>\n            </Container>\n        );\n    }\n\n}"
		}
	],
	"Button": [
		{
			"file": "Button.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button, CheckBoxField, Toolbar } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default class ButtonExample extends Component {\n\n    constructor() {\n        super();\n        this.state = { ui: [] };\n    }\n\n    toggleUI(ui) {\n        if (this.state.ui.indexOf(ui) !== -1) {\n            this.setState({ ui: this.state.ui.filter(u => u !== ui) })\n        } else {\n            this.setState({ ui: [...this.state.ui, ui]})\n        }\n    }\n\n    render() {\n        const { ui } = this.state;\n        const checkboxProps = { labelWidth: 'auto', labelAlign: 'right', margin: '0 20 0 0' };\n\n        return (\n            <Panel shadow={true} height={300} width={380} layout={{type: 'vbox', align: 'center', pack: 'center'}}>\n                <Button ref=\"button\" text=\"Button\" ui={ui.join(' ')} handler={() => Ext.toast('Clicked')}/>\n                <Toolbar docked=\"bottom\" layout=\"vbox\" shadow={true}>\n                    <div style={{marginBottom: '10px', textAlign: 'center'}}>Button UIs</div>\n                    <Container layout=\"hbox\">\n                        <CheckBoxField {...checkboxProps} label=\"action\" onChange={() => this.toggleUI('action')} />\n                        <CheckBoxField {...checkboxProps} label=\"alt\" onChange={() => this.toggleUI('alt')} />\n                        <CheckBoxField {...checkboxProps} label=\"confirm\" onChange={() => this.toggleUI('confirm')} />\n                        <CheckBoxField {...checkboxProps} label=\"decline\"onChange={() => this.toggleUI('decline')} />\n                        <CheckBoxField {...checkboxProps} label=\"round\" onChange={() => this.toggleUI('round')} />\n                    </Container>\n                </Toolbar>\n            </Panel>\n        )\n    }\n}"
		}
	],
	"Calendar": [
		{
			"file": "Calendar.js",
			"content": "import React, { Component } from 'react';\nimport { Calendar } from '@extjs/reactor/modern';\nimport './data';\n\nexport default class CalendarExample extends Component {\n    constructor() {\n        super();\n\n        this.store = Ext.create('Ext.calendar.store.Calendars', {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: '/KitchenSink/CalendarFull'\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Calendar\n                shadow\n                views={{\n                    day: {\n                        startTime: 6,\n                        endTime: 22\n                    },\n                    workweek: {\n                        xtype: 'calendar-week',\n                        controlStoreRange: false,\n                        titleTpl: '{start:date(\"j M\")} - {end:date(\"j M\")}',\n                        label: 'Work Week',\n                        weight: 15,\n                        dayHeaderFormat: 'D d',\n                        firstDayOfWeek: 1,\n                        visibleDays: 5                    \n                    }\n                }}\n                timezoneOffset={0}\n                store={this.store}\n            />\n        );\n    }\n}"
		}
	],
	"Carousel": [
		{
			"file": "Carousel.js",
			"content": "import React from 'react';\nimport { Carousel, Container } from '@extjs/reactor/modern';\n\nexport default function CarouselExample() {\n    return (\n        <Container layout={{ type: 'vbox', align: 'stretch' }} shadow={true}>\n            <Carousel flex={1} >\n                <Container {...cardProps} >\n                    <div>Swipe left to show the next card...</div>\n                </Container>\n                <Container {...cardProps}>\n                    <div>You can also tap on either side of the indicators.</div>\n                </Container>\n                <Container {...cardProps}>\n                    <div>Card #3</div>\n                </Container>\n            </Carousel>\n            <Carousel ui=\"light\" direction=\"vertical\" flex={1}>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>Carousels can also be vertical <em>(swipe up)...</em></div>\n                </Container>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>And can also use <code style={styles.code}>ui:light</code>.</div>\n                </Container>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>Card #3</div>\n                </Container>\n            </Carousel>\n        </Container>\n    )\n}\n\nconst styles = {\n    card: {\n        fontSize: '18px'\n    },\n    cardLight: {\n        backgroundColor: 'white',\n    },\n    cardDark: {\n        backgroundColor: '#303030',\n        color: 'white'\n    },\n    code: {\n        color: '#859900'\n    }\n};\n\nconst cardProps = {\n    flex: 1,\n    style: { ...styles.cardLight, ...styles.card },\n    layout: {\n        type: 'vbox',\n        align: 'center',\n        pack: 'center'\n    }\n};\n\n"
		}
	],
	"CheckBoxField": [
		{
			"file": "CheckBoxField.js",
			"content": "import React from 'react';\nimport { FormPanel, CheckBoxField } from '@extjs/reactor/modern';\n\nexport default function CheckBoxFieldExample() {\n    return (\n        <FormPanel shadow={true} layout={{type: 'vbox', align: 'left'}}>\n            <CheckBoxField \n                label=\"Label Right\" \n                labelAlign=\"right\"\n                labelWidth=\"auto\"\n            />\n            <CheckBoxField \n                label=\"Label Left\" \n                labelAlign=\"left\"\n                labelWidth=\"auto\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"DatePickerField": [
		{
			"file": "DatePickerField.js",
			"content": "import React from 'react';\nimport { FormPanel, DatePickerField } from '@extjs/reactor/modern';\n\nexport default function DatePickerFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <DatePickerField \n                value={new Date()}\n                destroyPickerOnHide={true}\n                label=\"Date\"\n                picker={{\n                    yearFrom: 1990\n                }}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"EmailField": [
		{
			"file": "EmailField.js",
			"content": "import React from 'react';\nimport { FormPanel, EmailField } from '@extjs/reactor/modern';\n\nexport default function EmailFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <EmailField \n                placeHolder=\"me@sencha.com\" \n                label=\"Email\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"FormPanel": [
		{
			"file": "FormPanel.js",
			"content": "import React, { Component } from 'react';\n\nimport { \n    FieldSet,\n    FormPanel, \n    UrlField, \n    TextField, \n    EmailField, \n    RadioField, \n    TextAreaField, \n    ToggleField, \n    SliderField, \n    DatePickerField, \n    PasswordField,\n    SpinnerField,\n    CheckBoxField,\n    Button,\n    SelectField,\n    Toolbar\n} from '@extjs/reactor/modern';\n\nexport default class FormPanelExample extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            disabled: false\n        };\n    }\n\n    toggleDisabled() {\n        this.setState({ disabled: !this.state.disabled });\n    }\n\n    render() {\n        const { disabled } = this.state;\n        \n        return (\n            <FormPanel ref=\"form\" shadow={true}>\n                <FieldSet disabled={disabled} ref=\"personal\" title=\"Personal Info\" layout={{ type: 'vbox', align: 'stretch' }} instructions=\"Please enter the information above.\">\n                    <TextField {...defaults} label=\"Name\" required={true}/>\n                    <PasswordField {...defaults} label=\"Password\" required={true} revealable={true}/>\n                    <EmailField {...defaults} label=\"Email\" placeHolder=\"me@sencha.com\"/>\n                    <UrlField {...defaults} label=\"URL\" placeHolder=\"http://sencha.com\"/>\n                    <SpinnerField label=\"Spinner\" minValue={0} maxValue={0} stepValue={1} cycle={true} margin=\"15 0 0 0\"/>\n                    <CheckBoxField label=\"Active\"/>\n                    <DatePickerField {...defaults} label=\"Start Date\"/>\n                    <SelectField {...defaults} label=\"Rank\"\n                        options={[\n                            { text: 'Master', value: 'master' },\n                            { text: 'Journeyman', value: 'journeyman' },\n                            { text: 'Apprentice', value: 'apprentice' }\n                        ]}\n                    />\n                    <SliderField label=\"Slider\"/>\n                    <ToggleField label=\"Toggle\"/>\n                    <TextAreaField label=\"Bio\" maxRows={5}/>\n                </FieldSet>\n                <FieldSet disabled={disabled} title=\"Favorite Color\" layout={{type: 'vbox', align: 'left'}}>\n                    <RadioField {...radioProps} label=\"Red\" value=\"red\"/>\n                    <RadioField {...radioProps} label=\"Blue\" value=\"blue\"/>\n                    <RadioField {...radioProps} label=\"Green\" value=\"green\"/>\n                    <RadioField {...radioProps} label=\"Purple\" value=\"purple\"/>\n                </FieldSet>\n                <Toolbar docked=\"bottom\">\n                    <Button ui=\"action\" text={disabled ? 'Enable All' : 'Disable All'} margin=\"0 10 0 0\" handler={this.toggleDisabled.bind(this)}/>\n                    <Button ui=\"action\" text=\"Reset\" handler={() => this.refs.form.reset()}/>\n                </Toolbar>\n            </FormPanel>\n        );\n    }\n}\n\nconst defaults = {\n    labelAlign: \"placeholder\"\n};\n\nconst radioProps = {\n    name: 'color',\n    labelAlign: 'right',\n    labelWidth: 'auto'\n};"
		}
	],
	"Gauge": [
		{
			"file": "Gauge.js",
			"content": "\nimport React, { Component } from 'react';\nimport { SliderField, Gauge, Panel } from '@extjs/reactor/modern';\n\nexport default class GaugeExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            value: 40\n        }\n    }\n\n    updateGauges(slider, value) {\n        this.setState({ value })\n    }\n\n    render() {\n        const { value } = this.state;\n\n        return (\n            <Panel shadow={true} layout=\"vbox\">\n                <SliderField label=\"Value\" onChange={this.updateGauges.bind(this)} value={value}/>\n                <Gauge flex={1} value={value}/>\n                <Gauge flex={1} value={value} ui=\"green\" trackStart={180} trackLength={360}/>\n            </Panel>\n        )\n    }\n\n}"
		}
	],
	"Grid": [
		{
			"file": "Grid.js",
			"content": "import React, { Component } from 'react';\nimport { Grid, ActionSheet, Toolbar, Container, Button } from '@extjs/reactor/modern';\nimport './data';\nimport model from './model';\n\nExt.require('Ext.grid.plugin.*');\nExt.require('Ext.tip.ToolTip');\n\nExt.define('KitchenSink.view.grid.BigDataRowModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.grid-bigdata-row',\n    formulas: {\n        ratingGroup: function (get) {\n            const age = get('record.averageRating');\n\n            if (age < 4) {\n                return 0;\n            }\n            if (age < 5) {\n                return 1;\n            }\n            if (age < 6) {\n                return 2;\n            }\n\n            return 3;\n        }\n    }\n});\n\nexport default class GridExample extends Component {\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.Store', {\n            model: model,\n            autoLoad: true,\n            groupField: 'department',\n            pageSize: 0,\n            proxy: {\n                type: 'ajax',\n                url: '/KitchenSink/BigData'\n            }            \n        }); \n    }\n\n    exportToXlsx() {\n        this.doExport({\n            type: 'excel07',\n            title: 'Grid Export Demo',\n            fileName: 'GridExport.xlsx'\n        });\n    }\n\n    exportToXml() {\n        this.doExport({\n            type:       'excel03',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.xml'\n        });\n    }\n\n    exportToCSV() {\n        this.doExport({\n            type:       'csv',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.csv'\n        });\n    }\n\n    exportToTSV() {\n         this.doExport({\n            type:       'tsv',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.csv'\n        });\n    }\n\n    exportToHtml() {\n         this.doExport({\n            type:       'html',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.html'\n        });\n    }\n\n    doExport(config) {\n        this.refs.exportMenu.hide();\n        this.refs.grid.saveDocumentAs(config);\n    }\n\n    onVerify(btn) {\n        const cell = btn.getParent(), record = cell.getRecord();\n        record.set('verified', true);\n        Ext.Msg.alert('Verify', 'Verify ' + record.get('forename') + ' ' + record.get('surname'));\n    }\n\n    salarySummaryRenderer(value) {\n        return Ext.util.Format.usMoney(value);\n    }\n\n    render() {\n        return (\n            <Container layout=\"fit\">\n                <ActionSheet ref=\"exportMenu\">\n                    <Button handler={this.exportToXlsx.bind(this)} text=\"Excel xlsx (all Items)\"/>\n                    <Button handler={this.exportToXml.bind(this)} text=\"Excel xml (all Items)\"/>\n                    <Button handler={this.exportToCSV.bind(this)} text=\"CSV (all Items)\"/>\n                    <Button handler={this.exportToTSV.bind(this)} text=\"TSV (all Items)\"/>\n                    <Button handler={this.exportToHtml.bind(this)} text=\"HTML (all Items)\"/>\n                    <Button handler={() => this.refs.exportMenu.hide()} text=\"Cancel\"/>\n                </ActionSheet>\n                <Grid\n                    ref=\"grid\"\n                    store={this.store}\n                    shadow\n                    grouped\n                    plugins={[\n                        { type: 'grideditable' },\n                        { type: 'gridviewoptions' },\n                        { type: 'pagingtoolbar' },\n                        { type: 'summaryrow' },\n                        { type: 'columnresizing' },\n                        { type: 'rowexpander' },\n                        { type: 'multiselection' },\n                        { type: 'gridexporter' }\n                    ]}\n                    itemConfig={{\n                        viewModel: {\n                            type: 'grid-bigdata-row'\n                        },\n                        body: {\n                            tpl: '<img src=\"{avatar}\" height=\"100px\" style=\"float:left;margin:0 10px 5px 0\"><b>{name}<br></b>{dob:date}'\n                        }\n                    }}\n                    columns={[\n                        { \n                            xtype: 'rownumberer' \n                        }, {\n                            text: 'Id',\n                            dataIndex: 'employeeNo',\n                            flex: 1,\n                            minWidth: 100,\n                            exportStyle: {\n                                format: 'General Number',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        }, {\n                            text: 'Name',\n                            dataIndex: 'fullName',\n                            styleHtmlContent: true,\n                            minWidth: 150\n                        }, {\n                            xtype: 'checkcolumn',\n                            headerCheckbox: true,\n                            dataIndex: 'verified',\n                            text: 'Verified'\n                        }, {\n                            text: 'Ratings',\n                            columns: [{\n                                text: 'Avg',\n                                xtype: 'numbercolumn',\n                                dataIndex: 'averageRating',\n                                width: 75,\n                                cell: {\n                                    cls:'big-data-ratings-cell'\n                                }\n                                    \n                            }, {\n                                text: 'All',\n                                dataIndex: 'rating',\n                                ignoreExport: true,\n                                cell: {\n                                    xtype: 'widgetcell',\n                                    forceWidth: true,\n                                    widget: {\n                                        xtype: 'sparklineline'\n                                    }\n                                }\n                            }]\n                        }, {\n                            text: 'Date of Birth',\n                            dataIndex: 'dob',\n                            editable: true,\n                            xtype: 'datecolumn',\n                            format: 'd-m-Y',\n                            // you can define an export style for a column\n                            // you can set alignment, format etc\n                            exportStyle: [{\n                                // no type key is defined here which means that me is the default style\n                                // that will be used by all exporters\n                                format: 'medium Date',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }, {\n                                // the type key means that me style will only be used by the csv exporter\n                                // and for all others the default one, defined above, will be used\n                                type: 'csv',\n                                format: 'Short Date'\n                            }]\n                        }, {\n                            text: '',\n                            width: 100,\n                            ignoreExport: true,\n                            cell: {\n                                xtype: 'widgetcell',\n                                widget: {\n                                    xtype: 'button',\n                                    ui: 'action',\n                                    text: 'Verify',\n                                    handler: this.onVerify.bind(this)\n                                }\n                            }\n                        }, {\n                            text: 'Join Date',\n                            dataIndex: 'joinDate',\n                            editable: true,\n                            xtype: 'datecolumn',\n                            format: 'd-m-Y',\n                            exportStyle: {\n                                format: 'medium Date',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        },\n                        {\n                            text: 'Notice Period',\n                            dataIndex: 'noticePeriod',\n                            editable: true\n                        },\n                        {\n                            text: 'Email',\n                            dataIndex: 'email',\n                            editable: true,\n                            editor: {\n                                xtype: 'emailfield'\n                            },\n                            width: 250\n                        },\n                        {\n                            text: 'Absences',\n                            columns: [{\n                                text: 'Illness',\n                                dataIndex: 'sickDays',\n                                align: 'center',\n                                summaryType: 'sum'\n                            }, {\n                                text: 'Holidays',\n                                dataIndex: 'holidayDays',\n                                align: 'center',\n                                summaryType: 'sum'\n                            }, {\n                                text: 'Holiday Allowance',\n                                dataIndex: 'holidayAllowance',\n                                align: 'center',\n                                summaryType: 'sum',\n                                summaryFormatter: 'number(\"0.00\")',\n                                formatter: 'number(\"0.00\")'\n                            }]\n                        },\n                        {\n                            text: 'Salary',\n                            dataIndex: 'salary',\n                            renderer: Ext.util.Format.usMoney,\n                            editable: true,\n                            width: 150,\n                            summaryType: 'sum',\n                            summaryRenderer: this.salarySummaryRenderer.bind(this),\n                            exportStyle: {\n                                format: 'Currency',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        }\n                    ]}\n                    onBeforeDocumentSave={(view) => {\n                        view.mask({\n                            xtype: 'loadmask',\n                            message: 'Document is prepared for export. Please wait ...'\n                        })\n                    }}\n                    onDocumentSave={(view) => view.unmask()}\n                >\n                    <Toolbar docked=\"top\">\n                        <Button text=\"Export to...\" handler={() => this.refs.exportMenu.show()}/>\n                    </Toolbar>\n                </Grid>\n            </Container>\n        )\n    }\n}"
		},
		{
			"file": "model.js",
			"content": "export default Ext.define('GridModel', {\n    extend: 'Ext.data.Model',\n    fields: [\n        {\n            name: 'employeeNo'\n        }, {\n            name: 'rating'\n        }, {\n            name: 'averageRating',\n            calculate: function (data) {\n                var average,\n                    i,\n                    ratings = data.rating || [],\n                    count = ratings.length;\n                for (i = 0, average = 0; i < count; i++) {\n                    average += data.rating[i];\n                }\n                return average / ratings.length;\n            }\n        }, {\n            name: 'salary',\n            type: 'number'\n        }, {\n            name: 'forename'\n        }, {\n            name: 'surname'\n        }, {\n            name: 'fullName',\n            calculate: ({forename, surname}) => `${forename} ${surname}`\n        }, {\n            name: 'email'\n        }, {\n            name: 'department'\n        }, {\n            name: 'dob',\n            type: 'date',\n            dateFormat: 'Ymd'\n        }, {\n            name: 'joinDate',\n            type: 'date',\n            dateFormat: 'Ymd'\n        }, {\n            name: 'noticePeriod'\n        }, {\n            name: 'sickDays',\n            type: 'integer'\n        }, {\n            name: 'holidayDays',\n            type: 'integer'\n        }, {\n            name: 'holidayAllowance',\n            type: 'integer'\n        }, {\n            name: 'avatar'\n        }, {\n            name: 'ratingLastYear',\n            type: 'integer'\n        }, {\n            name: 'ratingmeYear',\n            type: 'integer'\n        }\n    ],\n    idField: 'employeeNo'\n})"
		}
	],
	"List": [
		{
			"file": "List.js",
			"content": "import React, { Component } from 'react';\nimport { List } from '@extjs/reactor/modern';\nimport data from './data';\n\nExt.require([\n    'Ext.Toast',\n    'Ext.MessageBox'\n]);\n\nexport default class ListExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.Store', { \n            data,\n            grouper: {\n                groupFn: function(record) {\n                    return record.get('last_name')[0];\n                }\n            },\n            sorters: ['last_name', 'first_name']\n        });\n    }\n\n    render() {\n        return (\n            <List\n                indexBar={true}\n                shadow={true}\n                itemTpl=\"{first_name} {last_name}\"\n                grouped={true}\n                pinHeaders={true}\n                store={this.store}\n                onSelect={(list, record) => {\n                    Ext.toast(`You selected ${record.get('first_name')} ${record.get('last_name')}.`)\n                }}\n                config={{\n                    onItemDisclosure: (record, btn, index) => {\n                        Ext.Msg.alert('Tap', 'Disclose more info for ' + record.get('first_name'), Ext.emptyFn);\n                    }\n                }}\n            />\n        )\n    }\n\n}"
		},
		{
			"file": "data.js",
			"content": "export default [{\"id\":1,\"first_name\":\"Catherine\",\"last_name\":\"Alvarez\"},\n{\"id\":2,\"first_name\":\"Linda\",\"last_name\":\"Washington\"},\n{\"id\":3,\"first_name\":\"Eric\",\"last_name\":\"Griffin\"},\n{\"id\":4,\"first_name\":\"Pamela\",\"last_name\":\"Sanders\"},\n{\"id\":5,\"first_name\":\"Marie\",\"last_name\":\"Evans\"},\n{\"id\":6,\"first_name\":\"Rebecca\",\"last_name\":\"Black\"},\n{\"id\":7,\"first_name\":\"Martin\",\"last_name\":\"Woods\"},\n{\"id\":8,\"first_name\":\"Paul\",\"last_name\":\"Stewart\"},\n{\"id\":9,\"first_name\":\"Ruby\",\"last_name\":\"Peterson\"},\n{\"id\":10,\"first_name\":\"Gregory\",\"last_name\":\"Stephens\"},\n{\"id\":11,\"first_name\":\"Irene\",\"last_name\":\"Hawkins\"},\n{\"id\":12,\"first_name\":\"Brandon\",\"last_name\":\"Stephens\"},\n{\"id\":13,\"first_name\":\"Julie\",\"last_name\":\"Ray\"},\n{\"id\":14,\"first_name\":\"Donald\",\"last_name\":\"Kelly\"},\n{\"id\":15,\"first_name\":\"Martha\",\"last_name\":\"Lawrence\"},\n{\"id\":16,\"first_name\":\"Jason\",\"last_name\":\"Franklin\"},\n{\"id\":17,\"first_name\":\"Harold\",\"last_name\":\"Perry\"},\n{\"id\":18,\"first_name\":\"Kathryn\",\"last_name\":\"Stevens\"},\n{\"id\":19,\"first_name\":\"Alice\",\"last_name\":\"Hansen\"},\n{\"id\":20,\"first_name\":\"Christine\",\"last_name\":\"Garza\"},\n{\"id\":21,\"first_name\":\"Christine\",\"last_name\":\"Moore\"},\n{\"id\":22,\"first_name\":\"Susan\",\"last_name\":\"Robinson\"},\n{\"id\":23,\"first_name\":\"Annie\",\"last_name\":\"Mendoza\"},\n{\"id\":24,\"first_name\":\"Laura\",\"last_name\":\"Hall\"},\n{\"id\":25,\"first_name\":\"Barbara\",\"last_name\":\"Jordan\"},\n{\"id\":26,\"first_name\":\"Dorothy\",\"last_name\":\"Cook\"},\n{\"id\":27,\"first_name\":\"James\",\"last_name\":\"Reid\"},\n{\"id\":28,\"first_name\":\"David\",\"last_name\":\"Gutierrez\"},\n{\"id\":29,\"first_name\":\"Lawrence\",\"last_name\":\"Rogers\"},\n{\"id\":30,\"first_name\":\"Maria\",\"last_name\":\"Garza\"},\n{\"id\":31,\"first_name\":\"Robert\",\"last_name\":\"Chavez\"},\n{\"id\":32,\"first_name\":\"Brenda\",\"last_name\":\"Franklin\"},\n{\"id\":33,\"first_name\":\"Janice\",\"last_name\":\"Palmer\"},\n{\"id\":34,\"first_name\":\"Adam\",\"last_name\":\"Gordon\"},\n{\"id\":35,\"first_name\":\"Carol\",\"last_name\":\"Rice\"},\n{\"id\":36,\"first_name\":\"George\",\"last_name\":\"Mendoza\"},\n{\"id\":37,\"first_name\":\"Steve\",\"last_name\":\"Fields\"},\n{\"id\":38,\"first_name\":\"Louis\",\"last_name\":\"Rogers\"},\n{\"id\":39,\"first_name\":\"Ryan\",\"last_name\":\"Andrews\"},\n{\"id\":40,\"first_name\":\"Cheryl\",\"last_name\":\"Fernandez\"},\n{\"id\":41,\"first_name\":\"Lawrence\",\"last_name\":\"Black\"},\n{\"id\":42,\"first_name\":\"Linda\",\"last_name\":\"Clark\"},\n{\"id\":43,\"first_name\":\"Kevin\",\"last_name\":\"Palmer\"},\n{\"id\":44,\"first_name\":\"Evelyn\",\"last_name\":\"Sims\"},\n{\"id\":45,\"first_name\":\"Brenda\",\"last_name\":\"Griffin\"},\n{\"id\":46,\"first_name\":\"Lawrence\",\"last_name\":\"Woods\"},\n{\"id\":47,\"first_name\":\"Amy\",\"last_name\":\"Oliver\"},\n{\"id\":48,\"first_name\":\"Todd\",\"last_name\":\"Simpson\"},\n{\"id\":49,\"first_name\":\"Gloria\",\"last_name\":\"Patterson\"},\n{\"id\":50,\"first_name\":\"Scott\",\"last_name\":\"Greene\"},\n{\"id\":51,\"first_name\":\"Rachel\",\"last_name\":\"Gray\"},\n{\"id\":52,\"first_name\":\"Peter\",\"last_name\":\"Ray\"},\n{\"id\":53,\"first_name\":\"Martin\",\"last_name\":\"Porter\"},\n{\"id\":54,\"first_name\":\"Jean\",\"last_name\":\"Gutierrez\"},\n{\"id\":55,\"first_name\":\"Gary\",\"last_name\":\"Webb\"},\n{\"id\":56,\"first_name\":\"Billy\",\"last_name\":\"Bell\"},\n{\"id\":57,\"first_name\":\"Charles\",\"last_name\":\"Nelson\"},\n{\"id\":58,\"first_name\":\"Annie\",\"last_name\":\"Diaz\"},\n{\"id\":59,\"first_name\":\"Daniel\",\"last_name\":\"Watkins\"},\n{\"id\":60,\"first_name\":\"Terry\",\"last_name\":\"Watson\"},\n{\"id\":61,\"first_name\":\"Teresa\",\"last_name\":\"Dunn\"},\n{\"id\":62,\"first_name\":\"Nancy\",\"last_name\":\"Pierce\"},\n{\"id\":63,\"first_name\":\"Cynthia\",\"last_name\":\"Martinez\"},\n{\"id\":64,\"first_name\":\"Beverly\",\"last_name\":\"Matthews\"},\n{\"id\":65,\"first_name\":\"Keith\",\"last_name\":\"Crawford\"},\n{\"id\":66,\"first_name\":\"Christopher\",\"last_name\":\"Banks\"},\n{\"id\":67,\"first_name\":\"Gregory\",\"last_name\":\"Hansen\"},\n{\"id\":68,\"first_name\":\"Joyce\",\"last_name\":\"Hunt\"},\n{\"id\":69,\"first_name\":\"Nancy\",\"last_name\":\"Rice\"},\n{\"id\":70,\"first_name\":\"Dorothy\",\"last_name\":\"Murray\"},\n{\"id\":71,\"first_name\":\"George\",\"last_name\":\"Griffin\"},\n{\"id\":72,\"first_name\":\"Marie\",\"last_name\":\"Adams\"},\n{\"id\":73,\"first_name\":\"James\",\"last_name\":\"Oliver\"},\n{\"id\":74,\"first_name\":\"Joshua\",\"last_name\":\"Wood\"},\n{\"id\":75,\"first_name\":\"Martha\",\"last_name\":\"Marshall\"},\n{\"id\":76,\"first_name\":\"Shawn\",\"last_name\":\"Sanders\"},\n{\"id\":77,\"first_name\":\"Melissa\",\"last_name\":\"Cook\"},\n{\"id\":78,\"first_name\":\"Shawn\",\"last_name\":\"Martinez\"},\n{\"id\":79,\"first_name\":\"Roy\",\"last_name\":\"Clark\"},\n{\"id\":80,\"first_name\":\"Douglas\",\"last_name\":\"Carroll\"},\n{\"id\":81,\"first_name\":\"Joan\",\"last_name\":\"Jordan\"},\n{\"id\":82,\"first_name\":\"Stephen\",\"last_name\":\"Kennedy\"},\n{\"id\":83,\"first_name\":\"Alan\",\"last_name\":\"Coleman\"},\n{\"id\":84,\"first_name\":\"Patrick\",\"last_name\":\"Morris\"},\n{\"id\":85,\"first_name\":\"Sean\",\"last_name\":\"Fisher\"},\n{\"id\":86,\"first_name\":\"Jeremy\",\"last_name\":\"Hernandez\"},\n{\"id\":87,\"first_name\":\"Irene\",\"last_name\":\"Foster\"},\n{\"id\":88,\"first_name\":\"Larry\",\"last_name\":\"Roberts\"},\n{\"id\":89,\"first_name\":\"Adam\",\"last_name\":\"Gibson\"},\n{\"id\":90,\"first_name\":\"Willie\",\"last_name\":\"Lawson\"},\n{\"id\":91,\"first_name\":\"Marilyn\",\"last_name\":\"Stanley\"},\n{\"id\":92,\"first_name\":\"Emily\",\"last_name\":\"Wilson\"},\n{\"id\":93,\"first_name\":\"Billy\",\"last_name\":\"Gilbert\"},\n{\"id\":94,\"first_name\":\"Keith\",\"last_name\":\"Kelly\"},\n{\"id\":95,\"first_name\":\"Scott\",\"last_name\":\"Daniels\"},\n{\"id\":96,\"first_name\":\"Philip\",\"last_name\":\"Romero\"},\n{\"id\":97,\"first_name\":\"Phillip\",\"last_name\":\"Olson\"},\n{\"id\":98,\"first_name\":\"Diane\",\"last_name\":\"Richards\"},\n{\"id\":99,\"first_name\":\"Wanda\",\"last_name\":\"Gonzales\"},\n{\"id\":100,\"first_name\":\"Julia\",\"last_name\":\"Duncan\"},\n{\"id\":101,\"first_name\":\"Rachel\",\"last_name\":\"Medina\"},\n{\"id\":102,\"first_name\":\"Larry\",\"last_name\":\"Grant\"},\n{\"id\":103,\"first_name\":\"Donald\",\"last_name\":\"Baker\"},\n{\"id\":104,\"first_name\":\"Ryan\",\"last_name\":\"Phillips\"},\n{\"id\":105,\"first_name\":\"Rebecca\",\"last_name\":\"Burke\"},\n{\"id\":106,\"first_name\":\"Donald\",\"last_name\":\"Morris\"},\n{\"id\":107,\"first_name\":\"Susan\",\"last_name\":\"Perry\"},\n{\"id\":108,\"first_name\":\"Emily\",\"last_name\":\"Wright\"},\n{\"id\":109,\"first_name\":\"Annie\",\"last_name\":\"Duncan\"},\n{\"id\":110,\"first_name\":\"Cheryl\",\"last_name\":\"Perez\"},\n{\"id\":111,\"first_name\":\"Aaron\",\"last_name\":\"Robertson\"},\n{\"id\":112,\"first_name\":\"Willie\",\"last_name\":\"Weaver\"},\n{\"id\":113,\"first_name\":\"Russell\",\"last_name\":\"Gomez\"},\n{\"id\":114,\"first_name\":\"Samuel\",\"last_name\":\"Kennedy\"},\n{\"id\":115,\"first_name\":\"Jennifer\",\"last_name\":\"Burton\"},\n{\"id\":116,\"first_name\":\"Kathy\",\"last_name\":\"Sims\"},\n{\"id\":117,\"first_name\":\"James\",\"last_name\":\"Palmer\"},\n{\"id\":118,\"first_name\":\"Thomas\",\"last_name\":\"Williamson\"},\n{\"id\":119,\"first_name\":\"Fred\",\"last_name\":\"Cox\"},\n{\"id\":120,\"first_name\":\"Jacqueline\",\"last_name\":\"Walker\"},\n{\"id\":121,\"first_name\":\"Dennis\",\"last_name\":\"Stanley\"},\n{\"id\":122,\"first_name\":\"Eric\",\"last_name\":\"Stanley\"},\n{\"id\":123,\"first_name\":\"Billy\",\"last_name\":\"Jackson\"},\n{\"id\":124,\"first_name\":\"Michael\",\"last_name\":\"Sanders\"},\n{\"id\":125,\"first_name\":\"Diane\",\"last_name\":\"Knight\"},\n{\"id\":126,\"first_name\":\"Maria\",\"last_name\":\"Gardner\"},\n{\"id\":127,\"first_name\":\"Jeffrey\",\"last_name\":\"Shaw\"},\n{\"id\":128,\"first_name\":\"Justin\",\"last_name\":\"Cole\"},\n{\"id\":129,\"first_name\":\"Terry\",\"last_name\":\"Oliver\"},\n{\"id\":130,\"first_name\":\"Anne\",\"last_name\":\"Harper\"},\n{\"id\":131,\"first_name\":\"Harold\",\"last_name\":\"Wright\"},\n{\"id\":132,\"first_name\":\"Lois\",\"last_name\":\"Bradley\"},\n{\"id\":133,\"first_name\":\"Aaron\",\"last_name\":\"Collins\"},\n{\"id\":134,\"first_name\":\"Walter\",\"last_name\":\"Richards\"},\n{\"id\":135,\"first_name\":\"Paul\",\"last_name\":\"Brown\"},\n{\"id\":136,\"first_name\":\"Billy\",\"last_name\":\"Nichols\"},\n{\"id\":137,\"first_name\":\"Daniel\",\"last_name\":\"Price\"},\n{\"id\":138,\"first_name\":\"Willie\",\"last_name\":\"Rice\"},\n{\"id\":139,\"first_name\":\"Raymond\",\"last_name\":\"Banks\"},\n{\"id\":140,\"first_name\":\"Pamela\",\"last_name\":\"Alvarez\"},\n{\"id\":141,\"first_name\":\"Adam\",\"last_name\":\"Bennett\"},\n{\"id\":142,\"first_name\":\"George\",\"last_name\":\"Dean\"},\n{\"id\":143,\"first_name\":\"Edward\",\"last_name\":\"Powell\"},\n{\"id\":144,\"first_name\":\"Anne\",\"last_name\":\"Carpenter\"},\n{\"id\":145,\"first_name\":\"Paula\",\"last_name\":\"Jordan\"},\n{\"id\":146,\"first_name\":\"Judith\",\"last_name\":\"Lee\"},\n{\"id\":147,\"first_name\":\"Elizabeth\",\"last_name\":\"Boyd\"},\n{\"id\":148,\"first_name\":\"Paula\",\"last_name\":\"Coleman\"},\n{\"id\":149,\"first_name\":\"Christina\",\"last_name\":\"Gilbert\"},\n{\"id\":150,\"first_name\":\"Kimberly\",\"last_name\":\"Stone\"},\n{\"id\":151,\"first_name\":\"Helen\",\"last_name\":\"Gonzalez\"},\n{\"id\":152,\"first_name\":\"Phyllis\",\"last_name\":\"Perkins\"},\n{\"id\":153,\"first_name\":\"Denise\",\"last_name\":\"Shaw\"},\n{\"id\":154,\"first_name\":\"Janice\",\"last_name\":\"Howell\"},\n{\"id\":155,\"first_name\":\"Kathleen\",\"last_name\":\"Moore\"},\n{\"id\":156,\"first_name\":\"Ronald\",\"last_name\":\"Rogers\"},\n{\"id\":157,\"first_name\":\"Tammy\",\"last_name\":\"Smith\"},\n{\"id\":158,\"first_name\":\"Margaret\",\"last_name\":\"Myers\"},\n{\"id\":159,\"first_name\":\"Robin\",\"last_name\":\"Ortiz\"},\n{\"id\":160,\"first_name\":\"Sharon\",\"last_name\":\"Stone\"},\n{\"id\":161,\"first_name\":\"Stephen\",\"last_name\":\"Wood\"},\n{\"id\":162,\"first_name\":\"Gloria\",\"last_name\":\"Davis\"},\n{\"id\":163,\"first_name\":\"Ann\",\"last_name\":\"Simmons\"},\n{\"id\":164,\"first_name\":\"Jeremy\",\"last_name\":\"Robertson\"},\n{\"id\":165,\"first_name\":\"Nicole\",\"last_name\":\"Mccoy\"},\n{\"id\":166,\"first_name\":\"Victor\",\"last_name\":\"Owens\"},\n{\"id\":167,\"first_name\":\"Evelyn\",\"last_name\":\"Perez\"},\n{\"id\":168,\"first_name\":\"Matthew\",\"last_name\":\"Cooper\"},\n{\"id\":169,\"first_name\":\"Robin\",\"last_name\":\"Harvey\"},\n{\"id\":170,\"first_name\":\"Lillian\",\"last_name\":\"Owens\"},\n{\"id\":171,\"first_name\":\"Rebecca\",\"last_name\":\"Elliott\"},\n{\"id\":172,\"first_name\":\"Harry\",\"last_name\":\"Brooks\"},\n{\"id\":173,\"first_name\":\"Harold\",\"last_name\":\"Snyder\"},\n{\"id\":174,\"first_name\":\"Alan\",\"last_name\":\"Hernandez\"},\n{\"id\":175,\"first_name\":\"Betty\",\"last_name\":\"Fernandez\"},\n{\"id\":176,\"first_name\":\"Julie\",\"last_name\":\"Day\"},\n{\"id\":177,\"first_name\":\"Christina\",\"last_name\":\"Dean\"},\n{\"id\":178,\"first_name\":\"James\",\"last_name\":\"Bell\"},\n{\"id\":179,\"first_name\":\"Doris\",\"last_name\":\"Kelley\"},\n{\"id\":180,\"first_name\":\"Jane\",\"last_name\":\"Daniels\"},\n{\"id\":181,\"first_name\":\"Emily\",\"last_name\":\"Brown\"},\n{\"id\":182,\"first_name\":\"Timothy\",\"last_name\":\"Johnston\"},\n{\"id\":183,\"first_name\":\"Rachel\",\"last_name\":\"White\"},\n{\"id\":184,\"first_name\":\"Anna\",\"last_name\":\"Johnston\"},\n{\"id\":185,\"first_name\":\"Lori\",\"last_name\":\"Ramirez\"},\n{\"id\":186,\"first_name\":\"Albert\",\"last_name\":\"Butler\"},\n{\"id\":187,\"first_name\":\"Nancy\",\"last_name\":\"Perry\"},\n{\"id\":188,\"first_name\":\"Jeffrey\",\"last_name\":\"Fox\"},\n{\"id\":189,\"first_name\":\"Mary\",\"last_name\":\"Arnold\"},\n{\"id\":190,\"first_name\":\"Nicholas\",\"last_name\":\"Stephens\"},\n{\"id\":191,\"first_name\":\"Brenda\",\"last_name\":\"Tucker\"},\n{\"id\":192,\"first_name\":\"Janet\",\"last_name\":\"Hanson\"},\n{\"id\":193,\"first_name\":\"Aaron\",\"last_name\":\"George\"},\n{\"id\":194,\"first_name\":\"Joyce\",\"last_name\":\"Hansen\"},\n{\"id\":195,\"first_name\":\"Jessica\",\"last_name\":\"Mendoza\"},\n{\"id\":196,\"first_name\":\"Joan\",\"last_name\":\"Stevens\"},\n{\"id\":197,\"first_name\":\"Lillian\",\"last_name\":\"Adams\"},\n{\"id\":198,\"first_name\":\"Nicholas\",\"last_name\":\"Knight\"},\n{\"id\":199,\"first_name\":\"Judy\",\"last_name\":\"Payne\"},\n{\"id\":200,\"first_name\":\"Patrick\",\"last_name\":\"Torres\"}];"
		}
	],
	"Menu": [
		{
			"file": "Menu.js",
			"content": "import React, { Component } from 'react';\nimport { ViewPort, Panel, Button, Menu as EdgeMenu } from '@extjs/reactor/modern';\n\nexport default class MenuExample extends Component {\n\n    constructor() {\n        super();\n        this.menus = [];\n        \n        this.state = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.state.left) {\n            Ext.Viewport.showMenu('left');\n        } else {\n            Ext.Viewport.hideMenu('left');\n        }\n    }\n\n    render() {\n        const { left, right, top, bottom } = this.state;\n        \n        return (\n            <Panel>\n                <EdgeMenu side=\"left\" ref=\"left\" reveal={true} hidden={!this.state.left} onHide={() => this.setState({ left: false })}>\n                    <Button text=\"Settings\" iconCls=\"fa fa-gear\" handler={() => this.setState({left: false})}/>\n                    <Button text=\"New Item\" iconCls=\"fa fa-pencil\" handler={() => this.setState({left: false})}/>\n                    <Button text=\"Star\" iconCls=\"fa fa-star\" handler={() => this.setState({left: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"right\" ref=\"right\" reveal={true} hidden={!this.state.right} onHide={() => this.setState({ right: false })}>\n                    <Button text=\"Settings\" iconCls=\"fa fa-gear\" handler={() => this.setState({right: false})}/>\n                    <Button text=\"New Item\" iconCls=\"fa fa-pencil\" handler={() => this.setState({right: false})}/>\n                    <Button text=\"Star\" iconCls=\"fa fa-star\" handler={() => this.setState({right: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"top\" ref=\"top\" cover={true} hidden={!this.state.top} onHide={() => this.setState({ top: false })}>\n                    <Button text=\"Settings\" iconCls=\"fa fa-gear\" handler={() => this.setState({top: false})}/>\n                    <Button text=\"New Item\" iconCls=\"fa fa-pencil\" handler={() => this.setState({top: false})}/>\n                    <Button text=\"Star\" iconCls=\"fa fa-star\" handler={() => this.setState({top: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"bottom\" ref=\"bottom\" slide={true} hidden={!this.state.bottom} onHide={() => this.setState({ bottom: false })}>\n                    <Button text=\"Settings\" iconCls=\"fa fa-gear\" handler={() => this.setState({bottom: false})}/>\n                    <Button text=\"New Item\" iconCls=\"fa fa-pencil\" handler={() => this.setState({bottom: false})}/>\n                    <Button text=\"Star\" iconCls=\"fa fa-star\" handler={() => this.setState({bottom: false})}/>\n                </EdgeMenu>\n                <div><b>Ext.Menu</b> is a component which allows you to easily display slidingmenus from any side of the screen.</div>\n                <br/>\n                <br/>\n                <div>You can show the menus by either tapping the buttons below,or by swiping from the edge of the screen.</div>\n                <Button handler={() => this.setState({ left: true })} text=\"Toggle left menu (reveal)\"/>\n                <Button handler={() => this.setState({ right: true })} text=\"Toggle right menu (reveal)\"/>\n                <Button handler={() => this.setState({ top: true })} text=\"Toggle top menu (cover)\"/>\n                <Button handler={() => this.setState({ bottom: true })} text=\"Toggle bottom menu (slide)\"/>\n            </Panel>\n        )\n    }\n}\n"
		}
	],
	"Msg": [
		{
			"file": "Msg.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.MessageBox');\n\nexport default class MsgExample extends Component {\n\n    onConfirmResult(buttonId, value, opt) {\n        Ext.toast(`User clicked ${buttonId} button.`);\n    }\n\n    onPromptResult(buttonId, value) {\n        Ext.toast(`User clicked ${buttonId} and entered value \"${value}\".`);\n    }\n\n    render() {\n        return (\n            <Panel shadow layout={{type: 'vbox', align: 'stretch'}}>\n                <Button handler={() => Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.')}>Alert</Button>\n                <Button handler={() => Ext.Msg.prompt('Welcome!', \"What's your first name?\", this.onPromptResult.bind(this))}>Prompt</Button>\n                <Button handler={() => Ext.Msg.confirm(\"Confirmation\", \"Are you sure you want to do that?\", this.onConfirmResult.bind(this))}>Confirm</Button>\n            </Panel>\n        )\n    }\n    \n}"
		}
	],
	"NestedList": [
		{
			"file": "NestedList.js",
			"content": "import React, { Component } from 'react';\nimport { NestedList } from '@extjs/reactor/modern';\nimport root from './data';\n\nExt.require('Ext.Toast');\n\nexport default class ListExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.TreeStore', { \n            root \n        });\n    }\n\n    render() {\n        return (\n            <NestedList\n                title=\"Products\"\n                shadow={true}\n                displayField=\"text\"\n                store={this.store}\n                onLeafItemTap={(nestedList, list, index, target, record) => Ext.toast(`You selected ${record.get('text')}`)}\n            />\n        )\n    }\n    \n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    \"children\": [{\n        \"text\": \"Cars\",\n        \"children\": [{\n            \"text\": \"Asia\",\n            \"children\": [{\n                \"text\": \"Japan\",\n                \"children\": [{\n                    \"text\": \"Acura\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Honda\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Infiniti\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Mitsubishi\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Nissan\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Scion\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Subaru\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Toyota\",\n                    \"leaf\": true\n                }]\n            },{\n                \"text\": \"Korea\",\n                \"children\": [{\n                    \"text\": \"Hyundai\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Kia\",\n                    \"leaf\": true\n                }]\n            }]\n        },{\n            \"text\": \"United Kingdom\",\n            \"children\": [{\n                \"text\": \"Aston Martin\",\n                \"leaf\": true\n            },{\n                \"text\": \"Bentley\",\n                \"leaf\": true\n            },{\n                \"text\": \"TVR\",\n                \"leaf\": true\n            },{\n                \"text\": \"Land Rover\",\n                \"leaf\": true\n            }]\n        },{\n            \"text\": \"Europe\",\n            \"children\": [{\n                \"text\": \"Germany\",\n                \"children\": [{\n                    \"text\": \"Audi\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"BMW\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Opel\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Porsche\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Volkswagen\",\n                    \"leaf\": true\n                }]\n            },{\n                \"text\": \"France\",\n                \"children\": [{\n                    \"text\": \"Citroën\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Renault\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Peugeot\",\n                    \"leaf\": true\n                }]\n            }]\n        },{\n            \"text\": \"United States\",\n            \"children\": [{\n                \"text\": \"Buick\",\n                \"leaf\": true\n            },{\n                \"text\": \"Cadillac\",\n                \"leaf\": true\n            },{\n                \"text\": \"Chevrolet\",\n                \"leaf\": true\n            },{\n                \"text\": \"Chrysler\",\n                \"leaf\": true\n            },{\n                \"text\": \"Ford\",\n                \"leaf\": true\n            },{\n                \"text\": \"Jeep\",\n                \"leaf\": true\n            },{\n                \"text\": \"Oldsmobile\",\n                \"leaf\": true\n            },{\n                \"text\": \"Saturn\",\n                \"leaf\": true\n            },{\n                \"text\": \"Tesla\",\n                \"leaf\": true\n            }]\n        }]\n    }]\n}"
		}
	],
	"Panel": [
		{
			"file": "Panel.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nfunction toolHandler(owner, tool) {\n    Ext.toast(`You clicked ${tool.config.type}`);\n}\n\nexport default class PanelExample extends Component {\n\n    render() {\n        return (\n            <Container>\n                <Panel \n                    shadow\n                    title=\"Panel\" \n                    height={300}\n                    width={500}\n                    tools={[\n                        { type: 'minimize', handler: toolHandler },\n                        { type: 'refresh', handler: toolHandler },\n                        { type: 'save', handler: toolHandler },\n                        { type: 'search', handler: toolHandler },\n                        { type: 'close', handler: toolHandler }\n                    ]}\n                >\n                    <p>Panel Body</p>\n                </Panel>\n                <Button ui=\"action\" handler={() => this.refs.modal.show()} margin=\"20 0 0 0\">Show Modal</Button>\n                <Panel \n                    ref=\"modal\"\n                    title=\"Floated Panel\"\n                    modal\n                    floated\n                    centered\n                    hideOnMaskTap\n                    width={Ext.filterPlatform('ie10') ? '100%' : (Ext.os.deviceType == 'Phone') ? 260 : 400}\n                    maxHeight={Ext.filterPlatform('ie10') ? '30%' : (Ext.os.deviceType == 'Phone') ? 220 : 400}\n                    showAnimation={{\n                        type: 'popIn',\n                        duration: 250,\n                        easing: 'ease-out'\n                    }}\n                    hideAnimation={{\n                        type: 'popOut',\n                        duration: 250,\n                        easing: 'ease-out'\n                    }}\n                >\n                    <p>This is a modal, centered and floated panel. hideOnMaskTap is true by default so we can tap anywhere outside the overlay to hide it.</p>\n                </Panel>\n            </Container>\n        )\n    }\n}"
		}
	],
	"PasswordField": [
		{
			"file": "PasswordField.js",
			"content": "import React from 'react';\nimport { FormPanel, PasswordField } from '@extjs/reactor/modern';\n\nexport default function PasswordFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <PasswordField \n                label=\"Password\" \n                required={true} \n                revealable={true}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"Picker": [
		{
			"file": "Picker.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Picker, Button } from '@extjs/reactor/modern';\n\nexport default class PickerExample extends Component {\n\n    showPicker() {\n        this.refs.picker.show();\n    }\n\n    render() {\n        return (\n            <Panel shadow>\n                <Button handler={this.showPicker.bind(this)}>Show Picker</Button>\n                <Picker \n                    ref=\"picker\"\n                    slots={[\n                        {\n                            name: 'limit_speed',\n                            title: 'Speed',\n                            data: [\n                                {text: '50 KB/s', value: 50},\n                                {text: '100 KB/s', value: 100},\n                                {text: '200 KB/s', value: 200},\n                                {text: '300 KB/s', value: 300}\n                            ]\n                        }\n                    ]}\n                />\n            </Panel>\n        )\n    }\n    \n}"
		}
	],
	"PivotGrid": [
		{
			"file": "PivotGrid.js",
			"content": "import React, {Component} from 'react';\nimport { PivotGrid, Button, Toolbar} from '@extjs/reactor/modern';\nimport model from './model';\nimport './data';\n\nExt.require('Ext.pivot.*');\n\nexport default class PivotGridExample extends Component{\n    constructor(){\n        super();\n\n        this.store = Ext.create('Ext.data.Store', {\n            model,\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                limitParam: null,\n                url: '/KitchenSink/PivotData',\n                reader: {\n                    type: 'json'\n                }\n            },\n        });\n\n        this.pivotConfig = {\n            matrix: {\n                type : 'local',\n                store : this.store,\n                aggregate: [{\n                    dataIndex: 'value',\n                    header: 'Value',\n                    aggregator: 'avg',\n                    width: 120\n                }],\n                leftAxis:[{\n                    dataIndex: 'person',\n                    header: 'Person',\n                    width:120\n                }, {\n                    dataIndex: 'company',\n                    header: 'Company',\n                    sortable: false\n                }],\n                topAxis:[{\n                    dataIndex: 'year',\n                    header: 'Year',\n                    labelRenderer: value => `Year ${value}`\n                }]\n            },\n\n            topAxisCellConfig: {\n                bind: {\n                    userCls: '{cellStyle}'\n                },\n                viewModel: {\n                    type: 'default', \n                    formulas: {\n                        cellStyle: function (get) {\n                            var isGrandTotal = get('record.isRowGrandTotal') || get('column.isColGrandTotal'),\n                                isHeader = get('record.isRowGroupHeader') || get('column.isColGroupTotal'),\n                                isFooter = get('record.isRowGroupTotal'),\n                                value = get('value'),\n                                cls = get('column.topAxisColumn') ? (value >= 500 ? 'pivotCellAbove500' : 'pivotCellUnder500') : '';\n\n                            if (isGrandTotal) {\n                                cls = 'pivotCellGrandTotal';\n                            } else if(isFooter) {\n                                cls = 'pivotCellGroupFooter';\n                            } else if(isHeader) {\n                                cls = 'pivotCellGroupHeader';\n                            }\n\n                            return cls;\n                        }\n                    }\n                }\n            },\n\n            plugins: [{\n                type:'pivotdrilldown'\n            }, {\n                type:'pivotconfigurator',\n                fields:[{\n                    dataIndex: 'quantity',\n                    header: 'Qty',\n                    aggregator: 'min',\n                    formatter: 'number(\"0\")',\n                    settings: {\n                        allowed: ['aggregate'],\n                        style: {\n                            fontWeight: 'bold'\n                        },\n                        formatters: {\n                            '0':'number(\"0\")',\n                            '0%': 'number(\"0%\")'\n                        }\n                    }\n                }, {\n                    dataIndex: 'value',\n                    header: 'Value',\n                    settings: {\n                        allowed: 'aggregate',\n                        aggregators: ['sum', 'avg', 'count'],\n                        style: {\n                            fontWeight: 'bold'\n                        },\n                        renderers: {\n                            'Colored 0,000.00': (v, record, dataIndex, cell, column) => {\n                                cell.setStyle( Ext.String.format('color: {0};', v > 500 ? 'green' : 'red') );\n                                return Ext.util.Format.number(v, '0,000.00');\n                            }\n                        },\n                        formatters: {\n                            '0': 'number(\"0\")',\n                            '0.00': 'number(\"0.00\")',\n                            '0,000.00': 'number(\"0,000.00\")',\n                            '0%': 'number(\"0%\")',\n                            '0.00%': 'number(\"0.00%\")'\n                        }\n                    }\n                }, {\n                    dataIndex: 'company',\n                    header: 'Company',\n                    settings: {\n                        aggregators: ['count']\n                    }\n                }, {\n                    dataIndex: 'country',\n                    header: 'Country',\n                    settings: {\n                        aggregators: ['count']\n                    }\n                }, {\n                    dataIndex: 'person',\n                    header: 'Person',\n                    settings: {\n                        aggregators: 'count'\n                    }\n                }, {\n                    dataIndex: 'year',\n                    header: 'Year',\n                    labelRenderer: value => `Year ${value}`,\n                    settings: {\n                        fixed: ['topAxis']\n                    }\n                }, {\n                    dataIndex: 'month',\n                    header: 'Month',\n                    labelRenderer: value => Ext.Date.monthNames[value],\n                    settings: {\n                        aggregators: ['count'],\n                        allowed: ['leftAxis', 'topAxis']\n                    }\n                }] // end fields\n            }] // end plugins\n        } // end pivotConfig\n    }\n\n    render() {\n        return(\n            <PivotGrid ref=\"grid\" shadow { ...this.pivotConfig }>\n                <Toolbar docked=\"top\">\n                    <Button text=\"Show configurator\" handler={() => this.refs.grid.showConfigurator()}/>\n                    <Button text=\"Expand all\" handler={() => this.refs.grid.expandAll()}/>\n                    <Button text=\"Collapse all\" handler={() => this.refs.grid.collapseAll()}/>\n                </Toolbar>\n            </PivotGrid>\n        )\n    }\n}"
		},
		{
			"file": "model.js",
			"content": "export default Ext.define('Sale', function() {\n    var regions = {\n        \"Belgium\": 'Europe',\n        \"Netherlands\": 'Europe',\n        \"United Kingdom\": 'Europe',\n        \"Canada\": 'North America',\n        \"United States\": 'North America',\n        \"Australia\": 'Australia'\n    };\n    \n    return {\n        extend: 'Ext.data.Model',\n\n        fields: [\n            {name: 'id',        type: 'int'},\n            {name: 'company',   type: 'string'},\n            {name: 'country',   type: 'string'},\n            {name: 'person',    type: 'string'},\n            {name: 'date',      type: 'date', dateFormat: 'c'},\n            {name: 'value',     type: 'float'},\n            {name: 'quantity',  type: 'float'},\n            {\n                name: 'year',\n                calculate: function(data){\n                    return parseInt(Ext.Date.format(data.date, \"Y\"), 10);\n                }\n            },{\n                name: 'month',\n                calculate: function(data){\n                    return parseInt(Ext.Date.format(data.date, \"m\"), 10) - 1;\n                }\n            },{\n                name: 'continent',\n                calculate: function(data){\n                    return regions[data.country];\n                }\n            }\n        ]\n    };\n});"
		}
	],
	"ProgressBar": [
		{
			"file": "ProgressBar.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Progress } from '@extjs/reactor/modern';\n\nexport default class ProgressBarExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            progress: 0\n        } \n    }\n\n    componentDidMount() {\n        this.updateLoop = setInterval(() => { \n            let { progress } = this.state;\n            progress += 1;\n            if (progress > 100) progress = 0;\n            this.setState({ progress });\n        }, 100)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.updateLoop);\n    }\n\n    render() {\n        const { progress } = this.state;\n\n        return (\n            <Panel layout={{ type: 'vbox', align: 'center' }}>\n                <Progress value={progress/100.0} text={`Loading: ${progress}%`} width=\"75%\"/>\n                <div style={{marginTop: '20px'}}>Loading: {progress}%</div>\n                <Progress value={progress/100.0} width=\"75%\"/>\n            </Panel>\n        )\n    }\n\n}"
		}
	],
	"RadioField": [
		{
			"file": "RadioField.js",
			"content": "import React from 'react';\nimport { FormPanel, RadioField, FieldSet } from '@extjs/reactor/modern';\n\nconst radioProps = {\n    name: 'color',\n    labelAlign: 'right',\n    labelWidth: 'auto'\n};\n\nexport default function RadioFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <FieldSet title=\"Favorite Color\" layout={{type: 'vbox', align: 'left'}}>\n                <RadioField {...radioProps} label=\"Red\" value=\"red\"/>\n                <RadioField {...radioProps} label=\"Blue\" value=\"blue\"/>\n                <RadioField {...radioProps} label=\"Green\" value=\"green\"/>\n                <RadioField {...radioProps} label=\"Purple\" value=\"purple\"/>\n            </FieldSet>\n        </FormPanel>\n    )\n}"
		}
	],
	"SelectField": [
		{
			"file": "SelectField.js",
			"content": "import React from 'react';\nimport { FormPanel, SelectField, Container } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default function SelectFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <SelectField \n                label=\"Select\"  \n                onChange={value => Ext.toast(`You selected ${value}`)}\n                options={[\n                    { text: 'Option 1', value: 1 },\n                    { text: 'Option 2', value: 2 },\n                    { text: 'Option 3', value: 3 }\n                ]}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"SliderField": [
		{
			"file": "SliderField.js",
			"content": "import React, { Component } from 'react';\nimport { FormPanel, SliderField } from '@extjs/reactor/modern';\n\nexport default class SliderFieldExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            singleValue: 20,\n            multipleValue: [10, 70]\n        };\n    }\n\n    onSingleChange(field, value) {\n        this.setState({ singleValue: value });\n    }\n\n    onMultipleChange(field, value) {\n        this.setState({ multipleValue: value });\n    }\n\n    render() {\n        const { singleValue, multipleValue } = this.state;\n\n        return (\n            <FormPanel shadow={true}>\n                <SliderField \n                    onChange={this.onSingleChange.bind(this)}\n                    label=\"Single Thumb\"\n                    value={singleValue}\n                />\n                <div style={{marginBottom: '20px'}}>Value: {singleValue}</div>\n                <SliderField \n                    onChange={this.onMultipleChange.bind(this)}\n                    label=\"Multiple Thumbs\"\n                    values={multipleValue}\n                />\n                <div>Values: {multipleValue.join(', ')}</div>\n            </FormPanel>\n        )\n    }\n\n}"
		}
	],
	"SpinnerField": [
		{
			"file": "SpinnerField.js",
			"content": "import React from 'react';\nimport { FormPanel, SpinnerField } from '@extjs/reactor/modern';\n\nexport default function SpinnerFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <SpinnerField \n                label=\"Spinner\" \n                minValue={0} \n                maxValue={10} \n                stepValue={1} \n                cycle={true}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"TabPanel": [
		{
			"file": "TabPanel.js",
			"content": "import React from 'react';\nimport { TabPanel, Component, Container } from '@extjs/reactor/modern';\n\nexport default function TabPanelExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'stretch'}}>\n            <TabPanel \n                flex={1}\n                shadow={true} \n            >\n                <Container title=\"Tab 1\" {...tabProps}>\n                    <div>By default, tabs are aligned to the top of a view.</div>\n                </Container>\n                <Container title=\"Tab 2\" {...tabProps}>\n                    <div>A TabPanel can use different animations by setting <code>layout.animation.</code></div>\n                </Container>\n                <Container title=\"Tab 3\" {...tabProps}>\n                    <span className=\"action\">User tapped Tab 3</span>\n                </Container>\n            </TabPanel>\n\n            <TabPanel \n                flex={1}\n                shadow={true}\n                margin=\"20 0 0 0\"\n                tabBar={{ \n                    docked: 'bottom'\n                }}\n            >\n                <Container title=\"Info\" iconCls=\"fa fa-info-circle\" {...tabProps}>\n                    <div>Docking tabs to the bottom will automatically change their style.</div>\n                </Container>\n                <Container title=\"Download\" iconCls=\"fa fa-download\" badgeText=\"4\" {...tabProps}>\n                    <div>Badges <em>(like the 4, below)</em> can be added by setting <code>badgeText</code> when creating a tab or by using <code>setBadgeText()</code> on the tab later.</div>\n                </Container>\n                <Container title=\"Favorites\" iconCls=\"fa fa-star\" badgeText=\"Overflow Test\" {...tabProps}>\n                    <div>Badge labels will truncate if the text is wider than the tab.</div>\n                </Container>\n                <Container title=\"Bookmarks\" iconCls=\"fa fa-bookmark\" {...tabProps}>\n                    <div>Tabbars are <code>ui:\"dark\"</code> by default, but also have light variants.</div>\n                </Container>\n                <Container title=\"More\" iconCls=\"fa fa-ellipsis-h\" {...tabProps}>\n                    <span className=\"action\">User tapped User</span>\n                </Container>\n            </TabPanel>\n        </Container>\n    )\n}\n\nconst tabProps = {\n    cls: \"card\",\n    layout: { type: 'vbox', align: 'stretch', pack: 'center' }\n};\n\n"
		}
	],
	"TextAreaField": [
		{
			"file": "TextAreaField.js",
			"content": "import React from 'react';\nimport { FormPanel, TextAreaField } from '@extjs/reactor/modern';\n\nexport default function TextAreaFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <TextAreaField \n                label=\"Description\"\n                maxRows={10}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"TextField": [
		{
			"file": "TextField.js",
			"content": "import React from 'react';\nimport { FormPanel, Container, TextField, FieldSet } from '@extjs/reactor/modern';\n\nexport default function TextFieldExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'stretch'}}>\n            <FormPanel shadow={true} flex={1} margin=\"0 0 20 0\">\n                <FieldSet title=\"Separate Label and Placeholder\">\n                    <TextField placeHolder=\"Enter Name...\" label=\"Name\" required={true}/>\n                </FieldSet>\n            </FormPanel>\n            <FormPanel shadow={true} flex={1} height={100}>\n                <FieldSet title=\"Label as Placeholder\">\n                    <TextField labelAlign=\"placeholder\" label=\"Name\" required={true}/>\n                </FieldSet>\n            </FormPanel>\n        </Container>\n    )\n}"
		}
	],
	"Toast": [
		{
			"file": "Toast.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default function ToastExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'left'}}>\n            <Button \n                ui=\"action\" \n                handler={() => Ext.toast('Hello World!')}\n            >Show Toast</Button>\n        </Container>\n    )\n}"
		}
	],
	"ToggleField": [
		{
			"file": "ToggleField.js",
			"content": "import React from 'react';\nimport { FormPanel, ToggleField } from '@extjs/reactor/modern';\n\nexport default function ToggleFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <ToggleField \n                label=\"Toggle\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"ToolTip": [
		{
			"file": "ToolTip.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Button, Container } from '@extjs/reactor/modern';\n\nexport default class ToolTipExample extends Component {\n    render() {\n        const containerDefaults = {\n            margin: '0 0 50 0',\n            layout: {\n                type: 'hbox', \n                align: 'start', \n                pack: 'center' \n            }\n        };\n\n        const buttonDefaults = {\n            margin: '0 15 0 0'\n        };\n\n        return (\n            <Panel layout=\"vbox\" shadow>\n                <Container {...containerDefaults}>\n                    <Button {...buttonDefaults} tooltip=\"A simple tooltip\">Basic Tip</Button>\n                    \n                    <Button {...buttonDefaults} tooltip={{ \n                        autoHide: false, \n                        title: 'Tip Title',\n                        html: 'A simple tooltip',\n                        closable: true \n                    }}>autoHide: false</Button>\n                    \n                    <Button {...buttonDefaults} tooltip={{\n                        title: 'Mouse Track',\n                        html: 'This tip will follow the mouse while it is over the element',\n                        trackMouse: true\n                    }}>Mouse Track</Button>\n                </Container>\n\n                <Container {...containerDefaults}>\n                    <Button {...buttonDefaults} tooltip={{\n                        styleHtmlContent: true,\n                        html: '<ul style=\"margin-bottom: 15px;\">' +\n                                '<li>5 bedrooms</li>' + \n                                '<li>Close to transport</li>' +\n                                '<li>Large backyard</li>' +\n                            '</ul>' +\n                            '<img style=\"width: 400px; height: 300px;\" src=\"resources/images/house.jpg\" />',\n                        align: 'tl-tr',\n                        anchorToTarget: true,\n                        anchor: true,\n                        autoHide: false,\n                        closable: true\n                    }}>Anchor Right, Rich Content</Button>\n\n                    <Button {...buttonDefaults} tooltip={{\n                        html: 'The anchor is centered',\n                        anchorToTarget: true,\n                        align: 'tc-bc',\n                        anchor: true\n                    }}>Anchor Below</Button>\n\n                    <Button {...buttonDefaults} tooltip={{\n                        html: 'Following the mouse with an anchor',\n                        trackMouse: true,\n                        align: 'l-r',\n                        anchor: true\n                    }}>Anchor with Tracking</Button>\n                </Container>\n\n                <Container {...containerDefaults}>\n                    <div style={{...styles.qTipItem, ...styles.color1}} data-qtip=\"This tip is inline\">Inline Tip</div>\n                    <div style={{...styles.qTipItem, ...styles.color2}} data-qtip=\"This tip has a fixed width\" data-qwidth=\"400\">Fixed width inline tip</div>\n                    <div style={{...styles.qTipItem, ...styles.color3}} data-qtip=\"This tip has a title\" data-qtitle=\"The title\">Inline tip with title</div>\n                    <div style={{...styles.qTipItem, ...styles.color4}} data-qtip=\"Aligned top\" data-qalign=\"bl-tl\" data-qanchorToTarget=\"true\">Inline tip align top</div>\n                </Container>\n            </Panel>\n        )\n    }\n}\n\nconst styles = {\n    qTipItem: {\n        width: '150px',\n        margin: '0 15px 0 0',\n        color: 'white',\n        padding: '5px 10px',\n        textAlign: 'center',\n        cursor: 'default'\n    },\n    color1: {\n        backgroundColor: '#e91e63'\n    },\n    color2: {\n        backgroundColor: '#2196f3'\n    },\n    color3: {\n        backgroundColor: '#ff5722'\n    },\n    color4: {\n        backgroundColor: '#607d8b'\n    },\n};"
		}
	],
	"Toolbar": [
		{
			"file": "Toolbar.js",
			"content": "import React, { Component } from 'react';\nimport { Toolbar, Panel, Button, SegmentedButton, Spacer, SearchField } from '@extjs/reactor/modern';\n\nexport default class ToolbarExample extends Component {\n\n    constructor() {\n        super();\n        this.state = { message: '' }\n    }\n\n    buttonHandler(button) {\n        this.setState({ message: `User clicked \"${button.getText()}\"` })\n    }\n\n    render() {\n        const { message } = this.state;\n\n        return (\n            <Panel height={300} width={500} shadow bodyPadding={0}>\n                <Toolbar docked=\"top\">\n                    <Button text=\"Default\" onTap={this.buttonHandler.bind(this)} badgeText=\"2\"/>\n                    <Spacer/>\n                    <SegmentedButton>\n                        <Button text=\"Option 1\" pressed={true} handler={this.buttonHandler.bind(this)}/>\n                        <Button text=\"Option 2\" handler={this.buttonHandler.bind(this)}/>\n                    </SegmentedButton>\n                    <Spacer/>\n                    <Button ui=\"action\" text=\"Action\" handler={this.buttonHandler.bind(this)}/>\n                </Toolbar>\n               <div style={{padding: '20px'}}>{ message }</div>\n            </Panel>\n        )\n    }\n}"
		}
	],
	"TouchEvents": [
		{
			"file": "TouchEvents.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel } from '@extjs/reactor/modern';\n\nexport default class TouchEventsExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            events: []\n        }\n    }\n\n    componentDidMount() {\n        const fn = this.onTouchEvent.bind(this);\n\n        this.refs.touchpad.el.on({\n            scope: this,\n            touchstart: fn,\n            touchend: fn,\n            touchmove: fn,\n            swipe: fn,\n            dragstart: fn,\n            drag: fn,\n            dragend: fn,\n            tap: fn,\n            singletap: fn,\n            doubletap: fn,\n            longpress: fn,\n            pinch: fn,\n            rotate: fn\n        });\n    }\n\n    onTouchEvent(e, target, options) {\n        this.setState({events: [e.type, ...this.state.events]});\n    }\n\n    render() {\n        const { events } = this.state;\n\n        return (\n            <Container layout={{type: 'hbox', align: 'stretch'}}>\n                <Container flex={1} layout={{type: 'vbox', align: 'stretch'}} margin=\"0 20 0 0\">\n                    <Panel shadow margin=\"0 0 20 0\">\n                        <div>\n                            <p>Ext JS comes with a multitude of touch events available on components. Included touch events that can be used are:</p>\n                            <ul>\n                                <li>touchstart</li>\n                                <li>touchmove</li>\n                                <li>touchend</li>\n                                <li>dragstart</li>\n                                <li>drag</li>\n                                <li>dragend</li>\n                                <li>tap</li>\n                                <li>singletap</li>\n                                <li>doubletap</li>\n                                <li>longpress</li>\n                                <li>swipe</li>\n                                <li>pinch (on iOS and Android 3+)</li>\n                                <li>rotate (on iOS and Android 3+)</li>\n                            </ul>\n                        </div>\n                    </Panel>\n                    <Panel title=\"Event Log\" flex={1} scrollable>\n                        { events.map((e, i) => <div key={i}>{e}</div>) }\n                    </Panel>\n                </Container>\n                <Container ref=\"touchpad\" flex={1} layout={{type: 'vbox', pack: 'center', align: 'stretch'}} style={{border: '8px dashed #d6d6d6', borderRadius: '30px'}}>\n                    <div style={{textAlign: 'center', fontSize: '48px', fontWeight: 'bold', color: '#ccc'}}>Touch Here!</div>\n                </Container>\n            </Container> \n        );\n    }\n}"
		}
	],
	"Tree": [
		{
			"file": "Tree.js",
			"content": "import React, { Component } from 'react';\nimport { Tree } from '@extjs/reactor/modern';\nimport data from './data';\n\nExt.require('Ext.app.ViewModel');\n\nexport default class TreeExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.TreeStore', {\n            rootVisible: true,\n            root: data\n        })\n    }\n\n    render() {\n        return (\n            <Tree\n                width={350}\n                height={400}\n                store={this.store}\n                shadow={true}\n            />\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    expanded: true,\n    text: 'All',\n    iconCls: 'x-fa fa-sitemap',\n    children: [{\n        text: 'Home',\n        iconCls: 'x-fa fa-home',\n        children: [{\n            text: 'Messages',\n            iconCls: 'x-fa fa-inbox',\n            leaf: true\n        }, {\n            text: 'Archive',\n            iconCls: 'x-fa fa-database',\n            children: [{\n                text: 'First',\n                iconCls: 'x-fa fa-sliders',\n                leaf: true\n            }, {\n                text: 'No Icon',\n                iconCls: null,\n                leaf: true\n            }]\n        }, {\n            text: 'Music',\n            iconCls: 'x-fa fa-music',\n            leaf: true\n        }, {\n            text: 'Video',\n            iconCls: 'x-fa fa-film',\n            leaf: true\n        }]\n    }, {\n        text: 'Users',\n        iconCls: 'x-fa fa-user',\n        children: [{\n            text: 'Tagged',\n            iconCls: 'x-fa fa-tag',\n            leaf: true\n        }, {\n            text: 'Inactive',\n            iconCls: 'x-fa fa-trash',\n            leaf: true\n        }]\n    }, {\n        text: 'Groups',\n        iconCls: 'x-fa fa-group',\n        leaf: true\n    }, {\n        text: 'Settings',\n        iconCls: 'x-fa fa-wrench',\n        children: [{\n            text: 'Sharing',\n            iconCls: 'x-fa fa-share-alt',\n            leaf: true\n        }, {\n            text: 'Notifications',\n            iconCls: 'x-fa fa-flag',\n            leaf: true\n        }, {\n            text: 'Network',\n            iconCls: 'x-fa fa-signal',\n            leaf: true\n        }]\n    }]\n};"
		}
	],
	"TreeList": [
		{
			"file": "TreeList.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, TreeList, Toolbar, SegmentedButton, Button } from '@extjs/reactor/modern';\nimport data from './data';\n\nexport default class TreeListExample extends Component {\n\n    constructor() {\n        super();\n\n        this.store = Ext.create('Ext.data.TreeStore', {\n            rootVisible: true,\n            root: data\n        });\n\n        this.state = {\n            nav: false,\n            micro: false,\n            width: undefined\n        };\n    }\n\n    toggleNav(button, nav) {\n        this.setState({ nav });\n    }\n\n    toggleMicro(button, micro) {\n        this.setState({ \n            micro, \n            nav: micro || this.state.nav,\n            width: micro ? 56 : undefined\n        });\n    }\n\n    render() {\n        const { micro, nav, width } = this.state;\n\n        return (\n            <Panel title=\"TreeList\" shadow={true} layout=\"fit\">\n                <Toolbar docked=\"top\">\n                    <SegmentedButton allowMultiple={true}>\n                        <Button text=\"Nav\" pressed={nav} onPressedChange={this.toggleNav.bind(this)} disabled={micro}/>\n                        <Button text=\"Micro\" pressed={micro} onPressedChange={this.toggleMicro.bind(this)}/>\n                    </SegmentedButton>\n                </Toolbar>\n\n                <TreeList      \n                    ref=\"tree\"  \n                    width={width}\n                    expanderOnly={false}\n                    store={this.store}\n                    micro={micro}\n                    ui={nav ? 'nav' : null}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    expanded: true,\n    text: 'All',\n    iconCls: 'x-fa fa-sitemap',\n    children: [{\n        text: 'Home',\n        iconCls: 'x-fa fa-home',\n        children: [{\n            text: 'Messages',\n            iconCls: 'x-fa fa-inbox',\n            leaf: true\n        }, {\n            text: 'Archive',\n            iconCls: 'x-fa fa-database',\n            children: [{\n                text: 'First',\n                iconCls: 'x-fa fa-sliders',\n                leaf: true\n            }, {\n                text: 'No Icon',\n                iconCls: null,\n                leaf: true\n            }]\n        }, {\n            text: 'Music',\n            iconCls: 'x-fa fa-music',\n            leaf: true\n        }, {\n            text: 'Video',\n            iconCls: 'x-fa fa-film',\n            leaf: true\n        }]\n    }, {\n        text: 'Users',\n        iconCls: 'x-fa fa-user',\n        children: [{\n            text: 'Tagged',\n            iconCls: 'x-fa fa-tag',\n            leaf: true\n        }, {\n            text: 'Inactive',\n            iconCls: 'x-fa fa-trash',\n            leaf: true\n        }]\n    }, {\n        text: 'Groups',\n        iconCls: 'x-fa fa-group',\n        leaf: true\n    }, {\n        text: 'Settings',\n        iconCls: 'x-fa fa-wrench',\n        children: [{\n            text: 'Sharing',\n            iconCls: 'x-fa fa-share-alt',\n            leaf: true\n        }, {\n            text: 'Notifications',\n            iconCls: 'x-fa fa-flag',\n            leaf: true\n        }, {\n            text: 'Network',\n            iconCls: 'x-fa fa-signal',\n            leaf: true\n        }]\n    }]\n};"
		}
	],
	"UrlField": [
		{
			"file": "UrlField.js",
			"content": "import React from 'react';\nimport { FormPanel, UrlField } from '@extjs/reactor/modern';\n\nexport default function UrlFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <UrlField placeHolder=\"http://www.sencha.com\" label=\"URL\"/>\n        </FormPanel>\n    )\n} "
		}
	],
	"Video": [
		{
			"file": "Video.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Video } from '@extjs/reactor/modern';\n\nexport default function VideoExample() {\n    return (\n        <Panel shadow={true} layout=\"fit\">\n            <Video \n                loop={true} \n                url={['resources/video/BigBuck.m4v', 'resources/video/BigBuck.webm']}\n                posterUrl=\"resources/images/cover.jpg\"\n            />\n        </Panel>\n    );\n}"
		}
	]
}